import inspect
import unittest

from modules.score.tournament import Tournament


class MyTestCase(unittest.TestCase):
    def setUp(self):
        pass

    def test_load_tournament(self):
        tournament = Tournament("teams.csv")
        tournament.set_round(inspect.cleandoc(
            """
            T1 - Misifu (Ogre) 1 (0) v 0 (1) Mygaitero (Orc)
            T2 - Fran Mutado (Dwarf) 2 (6) v 1 (0) H3ct0r (Chaos Chosen)
            T3 - Abaddon (Underworld Denizens) 2 (6) v 1 (0) Karrashantemi (Elf Union)
            T4 - glukosidiko (Underworld Denizens) 2 (3) v 0 (1) Jose_Q (Shambling Undead)
            T5 - Metzar (Elf Union) 0 (0) v 2 (2) MapacheCoactivo (Imperial Nobility)
            T6 - Estertor (Dwarf) 0 (0) v 1 (1) Dakathllu (Human)
            T7 - zZKing (Human) 3 (2) v 1 (2) Totay (Khorne)
            T8 - Aguss (Khorne) 1 (3) v 0 (0) RojoCinco (Chaos Renegade)
            T9 - Shirokov (Underworld Denizens) 2 (3) v 1 (3) Xinalake (Chaos Renegade)
            T10 - Gpo (Tomb Kings) 1 (0) v 1 (0) jaruib (Dwarf)
            T11 - Pablo1880 (Underworld Denizens) 1 (1) v 0 (4) Tharsis (Khorne)
            T12 - Chache Perrache (Necromantic Horror) 1 (1) v 0 (2) Duke_Luthor_Von_Hawkfire (Dwarf)
            T13 - Weiss Akenatae (Chaos Dwarf) 1 (1) v 0 (1) Kwe (Chaos Chosen)
            T14 - Hurgh (Black Orc) 0 (3) v 2 (0) Ironcat (Dark Elf)
            T15 - Manra69 (Shambling Undead) 1 (0) v 2 (1) Rafmar (Dwarf)
            T16 - Celata (Norse) 1 (0) v 0 (1) Koki (Dark Elf)
            T17 - Calltroop (Amazon) 1 (2) v 0 (3) Paezinho (Shambling Undead)
            T18 - Ziost (Elf Union) 0 (0) v 1 (4) Maquinator (Khorne)
            T19 - Kale (Black Orc) 0 (3) v 1 (3) eu4rico (Shambling Undead)
            T20 - Azaghtogh (Dark Elf) 1 (0) v 1 (2) Lord Arioch (Shambling Undead)
            T21 - Hachablanca (Dark Elf) 2 (2) v 2 (0) David_Q (Human)
            T22 - Judaspainkiller (Shambling Undead) 1 (5) v 1 (1) adrianeden (Goblin)
            T23 - Bileman (Underworld Denizens) 1 (1) v 0 (7) LOBERAS (Shambling Undead)
            T24 - Serserius (Necromantic Horror) 0 (4) v 2 (5) Javin_23 (Underworld Denizens)
            T25 - SirSergio (Amazon) 0 (0) v 2 (2) BARBANCHO (Nurgle)
            T26 - Troloe (Goblin) 0 (3) v 1 (5) Xiete (Nurgle)
            T27 - Godzilla (Khorne) 3 (2) v 0 (2) bululito (Imperial Nobility)
            T28 - MagdaBB (Orc) 0 (0) v 2 (1) Galle (Halfling)
            T29 - Bubba (Snotling) 2 (2) v 1 (7) Jull45 (Necromantic Horror)
            T30 - Chemarvi (Halfling) 1 (4) v 1 (1) Ferre (Nurgle)
            T31 - Ronda (Necromantic Horror) 2 (3) v 0 (7) Lord_buba (Goblin)
            T32 - Sir Mayans (Chaos Renegade) 2 (3) v 1 (1) Pawel406 (Underworld Denizens)
            T33 - EduarSmoka (Lizardmen) 0 (3) v 3 (6) SrLombard (Dark Elf)
            T34 - Nopher (Skaven) 5 (6) v 1 (1) Leinad (Amazon)
            T35 - Harec (Snotling) 0 (1) v 1 (5) Pas_Mao (Orc)
            T36 - Serrano 65 (Elf Union) 6 (5) v 1 (0) Yorch (Goblin)
            T37 - skaripense (Norse) 2 (5) v 1 (1) Neo_Chains (Goblin)
            T38 - Purohit (Underworld Denizens) 0 (3) v 1 (2) Gabillas (Dark Elf)
            T39 - Sandor (Necromantic Horror) 2 (2) v 0 (4) Peluwo (Necromantic Horror)
            T40 - Pececito (Dark Elf) 2 (0) v 0 (3) Coates (Dwarf)
            T41 - Emiliakus (Dark Elf) 2 (0) v 0 (4) Golum89 (Norse)
        """))
        matches = tournament.rounds[0].matches
        self.assertEqual(matches[0].report_home.coach, tournament.coaches_dict["Misifu"])
        self.assertEqual(matches[0].report_away.coach, tournament.coaches_dict["Mygaitero"])
        self.assertEqual(matches[1].report_home.coach, tournament.coaches_dict["Fran Mutado"])
        self.assertEqual(matches[1].report_away.coach, tournament.coaches_dict["H3ct0r"])
        self.assertEqual(matches[2].report_home.coach, tournament.coaches_dict["Abaddon"])
        self.assertEqual(matches[2].report_away.coach, tournament.coaches_dict["Karrashantemi"])
        self.assertEqual(matches[3].report_home.coach, tournament.coaches_dict["glukosidiko"])
        self.assertEqual(matches[3].report_away.coach, tournament.coaches_dict["Jose_Q"])
        self.assertEqual(matches[4].report_home.coach, tournament.coaches_dict["Metzar"])
        self.assertEqual(matches[4].report_away.coach, tournament.coaches_dict["MapacheCoactivo"])
        self.assertEqual(matches[5].report_home.coach, tournament.coaches_dict["Estertor"])
        self.assertEqual(matches[5].report_away.coach, tournament.coaches_dict["Dakathllu"])
        self.assertEqual(matches[6].report_home.coach, tournament.coaches_dict["zZKing"])
        self.assertEqual(matches[6].report_away.coach, tournament.coaches_dict["Totay"])
        self.assertEqual(matches[7].report_home.coach, tournament.coaches_dict["Aguss"])
        self.assertEqual(matches[7].report_away.coach, tournament.coaches_dict["RojoCinco"])
        self.assertEqual(matches[8].report_home.coach, tournament.coaches_dict["Shirokov"])
        self.assertEqual(matches[8].report_away.coach, tournament.coaches_dict["Xinalake"])
        self.assertEqual(matches[9].report_home.coach, tournament.coaches_dict["Gpo"])
        self.assertEqual(matches[9].report_away.coach, tournament.coaches_dict["jaruib"])
        self.assertEqual(matches[10].report_home.coach, tournament.coaches_dict["Pablo1880"])
        self.assertEqual(matches[10].report_away.coach, tournament.coaches_dict["Tharsis"])
        self.assertEqual(matches[11].report_home.coach, tournament.coaches_dict["Chache Perrache"])
        self.assertEqual(matches[11].report_away.coach, tournament.coaches_dict["Duke_Luthor_Von_Hawkfire"])
        self.assertEqual(matches[12].report_home.coach, tournament.coaches_dict["Weiss Akenatae"])
        self.assertEqual(matches[12].report_away.coach, tournament.coaches_dict["Kwe"])
        self.assertEqual(matches[13].report_home.coach, tournament.coaches_dict["Hurgh"])
        self.assertEqual(matches[13].report_away.coach, tournament.coaches_dict["Ironcat"])
        self.assertEqual(matches[14].report_home.coach, tournament.coaches_dict["Manra69"])
        self.assertEqual(matches[14].report_away.coach, tournament.coaches_dict["Rafmar"])
        self.assertEqual(matches[15].report_home.coach, tournament.coaches_dict["Celata"])
        self.assertEqual(matches[15].report_away.coach, tournament.coaches_dict["Koki"])
        self.assertEqual(matches[16].report_home.coach, tournament.coaches_dict["Calltroop"])
        self.assertEqual(matches[16].report_away.coach, tournament.coaches_dict["Paezinho"])
        self.assertEqual(matches[17].report_home.coach, tournament.coaches_dict["Ziost"])
        self.assertEqual(matches[17].report_away.coach, tournament.coaches_dict["Maquinator"])
        self.assertEqual(matches[18].report_home.coach, tournament.coaches_dict["Kale"])
        self.assertEqual(matches[18].report_away.coach, tournament.coaches_dict["eu4rico"])
        self.assertEqual(matches[19].report_home.coach, tournament.coaches_dict["Azaghtogh"])
        self.assertEqual(matches[19].report_away.coach, tournament.coaches_dict["Lord Arioch"])
        self.assertEqual(matches[20].report_home.coach, tournament.coaches_dict["Hachablanca"])
        self.assertEqual(matches[20].report_away.coach, tournament.coaches_dict["David_Q"])
        self.assertEqual(matches[21].report_home.coach, tournament.coaches_dict["Judaspainkiller"])
        self.assertEqual(matches[21].report_away.coach, tournament.coaches_dict["adrianeden"])
        self.assertEqual(matches[22].report_home.coach, tournament.coaches_dict["Bileman"])
        self.assertEqual(matches[22].report_away.coach, tournament.coaches_dict["LOBERAS"])
        self.assertEqual(matches[23].report_home.coach, tournament.coaches_dict["Serserius"])
        self.assertEqual(matches[23].report_away.coach, tournament.coaches_dict["Javin_23"])
        self.assertEqual(matches[24].report_home.coach, tournament.coaches_dict["SirSergio"])
        self.assertEqual(matches[24].report_away.coach, tournament.coaches_dict["BARBANCHO"])
        self.assertEqual(matches[25].report_home.coach, tournament.coaches_dict["Troloe"])
        self.assertEqual(matches[25].report_away.coach, tournament.coaches_dict["Xiete"])
        self.assertEqual(matches[26].report_home.coach, tournament.coaches_dict["Godzilla"])
        self.assertEqual(matches[26].report_away.coach, tournament.coaches_dict["bululito"])
        self.assertEqual(matches[27].report_home.coach, tournament.coaches_dict["MagdaBB"])
        self.assertEqual(matches[27].report_away.coach, tournament.coaches_dict["Galle"])
        self.assertEqual(matches[28].report_home.coach, tournament.coaches_dict["Bubba"])
        self.assertEqual(matches[28].report_away.coach, tournament.coaches_dict["Jull45"])
        self.assertEqual(matches[29].report_home.coach, tournament.coaches_dict["Chemarvi"])
        self.assertEqual(matches[29].report_away.coach, tournament.coaches_dict["Ferre"])
        self.assertEqual(matches[30].report_home.coach, tournament.coaches_dict["Ronda"])
        self.assertEqual(matches[30].report_away.coach, tournament.coaches_dict["Lord_buba"])
        self.assertEqual(matches[31].report_home.coach, tournament.coaches_dict["Sir Mayans"])
        self.assertEqual(matches[31].report_away.coach, tournament.coaches_dict["Pawel406"])
        self.assertEqual(matches[32].report_home.coach, tournament.coaches_dict["EduarSmoka"])
        self.assertEqual(matches[32].report_away.coach, tournament.coaches_dict["SrLombard"])
        self.assertEqual(matches[33].report_home.coach, tournament.coaches_dict["Nopher"])
        self.assertEqual(matches[33].report_away.coach, tournament.coaches_dict["Leinad"])
        self.assertEqual(matches[34].report_home.coach, tournament.coaches_dict["Harec"])
        self.assertEqual(matches[34].report_away.coach, tournament.coaches_dict["Pas_Mao"])
        self.assertEqual(matches[35].report_home.coach, tournament.coaches_dict["Serrano 65"])
        self.assertEqual(matches[35].report_away.coach, tournament.coaches_dict["Yorch"])
        self.assertEqual(matches[36].report_home.coach, tournament.coaches_dict["skaripense"])
        self.assertEqual(matches[36].report_away.coach, tournament.coaches_dict["Neo_Chains"])
        self.assertEqual(matches[37].report_home.coach, tournament.coaches_dict["Purohit"])
        self.assertEqual(matches[37].report_away.coach, tournament.coaches_dict["Gabillas"])
        self.assertEqual(matches[38].report_home.coach, tournament.coaches_dict["Sandor"])
        self.assertEqual(matches[38].report_away.coach, tournament.coaches_dict["Peluwo"])
        self.assertEqual(matches[39].report_home.coach, tournament.coaches_dict["Pececito"])
        self.assertEqual(matches[39].report_away.coach, tournament.coaches_dict["Coates"])




if __name__ == '__main__':
    unittest.main()
